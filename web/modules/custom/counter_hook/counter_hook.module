<?php

/**
 * @file
 * It counts the visit and show it to the same node using node_view hook.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_counter().
 */
function counter_hook_counter($current_count, NodeInterface $node) {
  if ($current_count === 1) {
    \Drupal::messenger()->addMessage(t('This node visited for first time.'));
  }
  else {
    \Drupal::messenger()->addMessage(('This node visited for ' . $current_count . ' times'));
  }
  $build['view_count'] = [
    '#markup' => '<p>' . t('You have viewed this node @total times this session.', ['@total' => $current_count]) . '</p>',
    '#cache' => ['max-age' => 0],
  ];
}

/**
 * Count the number of times the current node has been viewed this session.
 */
function counter_hook_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Initiates session to store count of visits.
  $session = \Drupal::request()->getSession();
  $current_counts = $session->get('hooks_example.view_counts', []);

  // If the session is not set initialize with 1 otherwise, increment the value.
  if (!isset($current_counts[$entity->id()])) {
    $current_counts[$entity->id()] = 1;
  }
  else {
    $current_counts[$entity->id()]++;
  }
  $session->set('hooks_example.view_counts', $current_counts);

  // Invoke a hook to alert other modules that the count was updated.
  $module_handler = \Drupal::moduleHandler();

  // Invoking hook_counter()
  $module_handler->invokeAll('counter',
  [$current_counts[$entity->id()], $entity]);

  // Display the current number of pages the user has viewed along with the
  // node's content.
  $build['view_count'] = [
    '#markup' => '<p>' . t('You have viewed this node @total times this session.', ['@total' => $current_counts[$entity->id()]]) . '</p>',
    '#cache' => ['max-age' => 0],
  ];
}
